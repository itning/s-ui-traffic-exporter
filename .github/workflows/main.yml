name: Build Multi-Platform Binaries and Upload to Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: true
          prerelease: false

  build-and-upload:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有 git 历史用于版本信息

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Get Git Info
        id: git
        run: |
          echo "revision=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Build Binary
        id: build
        run: |
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}
          # Determine the output file name with .exe extension for Windows
          OUTPUT_FILE="s-ui-traffic-exporter-${GOOS}-${GOARCH}${{ matrix.os == 'windows' && '.exe' || '' }}"
          echo "Building for ${GOOS}/${GOARCH}..."
          
          # 设置版本信息 ldflags
          LDFLAGS="-X 'github.com/prometheus/common/version.Version=${{ github.event.inputs.version }}' \
                   -X 'github.com/prometheus/common/version.Revision=${{ steps.git.outputs.revision }}' \
                   -X 'github.com/prometheus/common/version.Branch=${{ steps.git.outputs.branch }}' \
                   -X 'github.com/prometheus/common/version.BuildUser=github-actions' \
                   -X 'github.com/prometheus/common/version.BuildDate=${{ steps.git.outputs.build_date }}'"
          
          go build -ldflags "$LDFLAGS" -o $OUTPUT_FILE main.go
          echo "output_file=$OUTPUT_FILE" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.output_file }}
          asset_name: ${{ env.output_file }}
          asset_content_type: application/octet-stream
